TODO
----
* send_message() sends unencrypted sender_id
* third party encryption function
* create "netdog" dir in tmpfs
* Turn off monitors
* System status
* execute acknowledgement
* auto rename hosts
* ignore NAT interfaces?
* execute task
* favorites
* scheduled tasks
* System status + Log
* accessible only from local machine switch
* update client side localhost_address only after ACK from server
* file bug report to netaddr
* make update_known_nodes() usable for all purposes
* add node type to known_nodes
* faster ping sweep
* assign alternate hostname if duplicate found
* fix signature
* easy to use prewritten scripts
* scheduled command execution
* group clients
* decide when client should check if server is reachable
* add auto port in send_message()
* ping command in netdog protocol
* why is client not exiting peacfully?
* properly find broadcast network of address
* what to do when server can't be reached (proper policies)
* handle situation when client finds no server
* add firewall exceptions during installation
* elegant code to find network address (without host bit)

DONE
----
* shutdown clients
* broadcast files
* broadcast_file dir create in post_install script
* create get_active_clients()
* upgrade pip in during install
* fix cleanup_beacon_db() error
* file chooser form
* send commands only to online clients
* move logging to higher level functions
* standard error page
* index page
* welcome page
* design header
* list clients
* checkboxes in target_nodes.html now checked by default
* custom command
* fix command not fully received bug
* fix command execution bug
* setup command flow
* templating functionality to standard error page
* start running web interface on 9000 port
* switch to flask
* create account
* separate process for web server
* network interface selection page
* setup cookies
* login page
* password creation page
* first time run screen
* update_ip
* update client side last_known_address after update
* fix update_known_nodes overwriting existing data in known_nodes
* beacon
* beacon_db
* beacon_db cleanup service

PHASE-I
----
* implement signature
* add timestamp to log
* do encryption
* remove double encryption and decryption
* test encrypt/decrypt functions
* figure out way to send key length to decrypt()
* refactor probe_interfaces()
* do not create known_nodes dir in client
* convert messages to dict
* refactor handling of pairing
* convert public/private key files to JSON
* refactor setup_network()
* eliminate pairing lag
* club the data into files
* convert known_network to dict
* store_known_network code
* replace lookup_table with known_nodes
* test new update_configuration()
* ip_address in known_nodes file
* temporary UI for choosing netiface for server
* replace load_nodes() with read_configuration()
* return None if no file in read configuration()
* replace retrieve_network_info()
* integrate last_known_address into known_network
* move network_status outside retrieve_network_info()
* replace ping broadcast with own ping
* convert known_network into json
* convert known_server to JSON (server_id, ip, pub_key)
* thread handling in lookup_table write
* test retrieve_client_address()
* each new connection should be separate thread in create_new_listen_socket()
* Intercept Ctrl + C and gracefully exit
* fix the numbering thing in probe_interfaces()
* make sure client can receive public_key returned by the server
* more useful logging for find_hosts()
* do proper netmasking
* enable log to console
* test network address with host bit set
* fix network search
* network check if retrieve_network_info() is successful 
* Check if close() after normal connect quits server
* port open check closes server
