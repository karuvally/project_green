TODO
----
* eliminate pairing lag
* add time to log
* replace lookup_table with known_nodes
* refactor setup_network()
* ping command in netdog protocol
* store_known_network code
* do encryption
* why is client not exiting peacfully?
* properly find broadcast network of address
* convert known_network to dict
* convert messages to dict
* what to do when server can't be reached
* handle situation when client finds no server
* club the data into files
* do not create known_nodes dir in client
* add firewall exceptions during installation
* refactor probe_interfaces()
* elegant code to find network address (without host bit)

DONE
----
* test new update_configuration()
* ip_address in known_nodes file
* temporary UI for choosing netiface for server
* replace load_nodes() with read_configuration()
* return None if no file in read configuration()
* replace retrieve_network_info()
* integrate last_known_address into known_network
* move network_status outside retrieve_network_info()
* replace ping broadcast with own ping
* convert known_network into json
* convert known_server to JSON (server_id, ip, pub_key)
* thread handling in lookup_table write
* test retrieve_client_address()
* each new connection should be separate thread in create_new_listen_socket()
* Intercept Ctrl + C and gracefully exit
* fix the numbering thing in probe_interfaces()
* make sure client can receive public_key returned by the server
* more useful logging for find_hosts()
* do proper netmasking
* enable log to console
* test network address with host bit set
* fix network search
* network check if retrieve_network_info() is successful 
* Check if close() after normal connect quits server
* port open check closes server
